From 6565c17ba4584b0cb28c471cc87a9f2e68c98df3 Mon Sep 17 00:00:00 2001
From: ayaka <ayaka@soulik.info>
Date: Sun, 26 Mar 2017 04:54:42 +0800
Subject: [PATCH] [WIP]: video: Add P010_10LEC pixel format

This pixel format is a variant of P010_10LE, without any filled
bits between pixels in a stride.

Signed-off-by: ayaka <ayaka@soulik.info>
---
 gst-libs/gst/video/video-format.c | 99 +++++++++++++++++++++++++++++++++++++++
 gst-libs/gst/video/video-format.h |  6 ++-
 2 files changed, 104 insertions(+), 1 deletion(-)

diff --git a/gst-libs/gst/video/video-format.c b/gst-libs/gst/video/video-format.c
index 7ef5769..5e773ad 100644
--- a/gst-libs/gst/video/video-format.c
+++ b/gst-libs/gst/video/video-format.c
@@ -25,6 +25,7 @@
 
 #include <string.h>
 #include <stdio.h>
+#include <gst/base/gstbitreader.h>
 
 #include "video-format.h"
 #include "video-orc.h"
@@ -3665,6 +3666,102 @@ pack_P010_10LE (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
   }
 }
 
+#define PACK_P010_10LEC GST_VIDEO_FORMAT_AYUV64, unpack_P010_10LEC, 1, pack_P010_10LEC
+static void
+unpack_P010_10LEC (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
+    gpointer dest, const gpointer data[GST_VIDEO_MAX_PLANES],
+    const gint stride[GST_VIDEO_MAX_PLANES], gint x, gint y, gint width)
+{
+  int i;
+  gint uv = GET_UV_420 (y, flags);
+  GstBitReader *sy = NULL;
+  GstBitReader *suv = NULL;
+  guint16 *restrict d = dest;
+  guint16 Y0, Y1, U, V;
+  const gpointer y_src = GET_PLANE_LINE (0, y);
+  const gpointer uv_src = GET_PLANE_LINE (1, uv);
+
+  sy = gst_bit_reader_new (y_src, (x + width) * 10 / 8);
+  suv = gst_bit_reader_new (uv_src, (x + width) * 10 / 8);
+
+  gst_bit_reader_set_pos (sy, x * 10);
+  gst_bit_reader_set_pos (suv, (x & ~1) * 10);
+
+  for (i = 0; i < width / 2; i++) {
+    gst_bit_reader_get_bits_uint16 (sy, &Y0, 10);
+    gst_bit_reader_get_bits_uint16 (sy, &Y1, 10);
+
+    gst_bit_reader_get_bits_uint16 (suv, &U, 10);
+    gst_bit_reader_get_bits_uint16 (suv, &V, 10);
+    Y0 = Y0 << 6;
+    Y1 = Y1 << 6;
+    U = U << 6;
+    V = V << 6;
+
+    if (!(flags & GST_VIDEO_PACK_FLAG_TRUNCATE_RANGE)) {
+      Y0 |= (Y0 >> 10);
+      Y1 |= (Y1 >> 10);
+      U |= (U >> 10);
+      V |= (V >> 10);
+    }
+
+    d[i * 8 + 0] = 0xffff;
+    d[i * 8 + 1] = Y0;
+    d[i * 8 + 2] = 0;
+    d[i * 8 + 3] = 0;
+    d[i * 8 + 4] = 0xffff;
+    d[i * 8 + 5] = Y1;
+    d[i * 8 + 6] = 0;
+    d[i * 8 + 7] = 0;
+  }
+
+  gst_bit_reader_free (sy);
+  gst_bit_reader_free (suv);
+}
+
+static void
+pack_P010_10LEC (const GstVideoFormatInfo * info, GstVideoPackFlags flags,
+    const gpointer src, gint sstride, gpointer data[GST_VIDEO_MAX_PLANES],
+    const gint stride[GST_VIDEO_MAX_PLANES], GstVideoChromaSite chroma_site,
+    gint y, gint width)
+{
+  int i;
+  gint uv = GET_UV_420 (y, flags);
+  guint16 Y0, Y1, U, V;
+  /* TODO */
+#if 0
+  if (IS_CHROMA_LINE_420 (y, flags)) {
+    for (i = 0; i < width / 2; i++) {
+      Y0 = s[i * 8 + 1] & 0xffc0;
+      Y1 = s[i * 8 + 5] & 0xffc0;
+      U = s[i * 8 + 2] & 0xffc0;
+      V = s[i * 8 + 3] & 0xffc0;
+
+      GST_WRITE_UINT16_LE (dy + i * 2 + 0, Y0);
+      GST_WRITE_UINT16_LE (dy + i * 2 + 1, Y1);
+      GST_WRITE_UINT16_LE (duv + i * 2 + 0, U);
+      GST_WRITE_UINT16_LE (duv + i * 2 + 1, V);
+    }
+    if (width & 1) {
+      gint i = width - 1;
+
+      Y0 = s[i * 4 + 1] & 0xffc0;
+      U = s[i * 4 + 2] & 0xffc0;
+      V = s[i * 4 + 3] & 0xffc0;
+
+      GST_WRITE_UINT16_LE (dy + i, Y0);
+      GST_WRITE_UINT16_LE (duv + i + 0, U);
+      GST_WRITE_UINT16_LE (duv + i + 1, V);
+    }
+  } else {
+    for (i = 0; i < width; i++) {
+      Y0 = s[i * 4 + 1] & 0xffc0;
+      GST_WRITE_UINT16_LE (dy + i, Y0);
+    }
+  }
+#endif
+}
+
 typedef struct
 {
   guint32 fourcc;
@@ -3942,6 +4039,8 @@ static const VideoFormat formats[] = {
       DPTH888, PSTR333, PLANE0, OFFS102, SUB444, PACK_IYU2),
   MAKE_YUV_FORMAT (VYUY, "raw video", GST_MAKE_FOURCC ('V', 'Y', 'U', 'Y'),
       DPTH888, PSTR244, PLANE0, OFFS102, SUB422, PACK_VYUY),
+  MAKE_YUV_C_FORMAT (P010_10LEC, "raw video", 0x00000000, DPTH10_10_10,
+      PSTR0, PLANE011, OFFS0, SUB420, PACK_P010_10LEC),
 };
 
 static GstVideoFormat
diff --git a/gst-libs/gst/video/video-format.h b/gst-libs/gst/video/video-format.h
index c5eabf0..80e4ca0 100644
--- a/gst-libs/gst/video/video-format.h
+++ b/gst-libs/gst/video/video-format.h
@@ -97,6 +97,8 @@ G_BEGIN_DECLS
  * @GST_VIDEO_FORMAT_A444_10LE: planar 4:4:4:4 YUV, 10 bits per channel
  * @GST_VIDEO_FORMAT_P010_10BE: planar 4:2:0 YUV with interleaved UV plane, 10 bits per channel
  * @GST_VIDEO_FORMAT_P010_10LE: planar 4:2:0 YUV with interleaved UV plane, 10 bits per channel
+ * @GST_VIDEO_FORMAT_P010_10LE: planar 4:2:0 YUV with interleaved UV plane, 10 bits per channel
+ * @GST_VIDEO_FORMAT_P010_10LEC: planar 4:2:0 YUV with interleaved UV plane, 10 bits per channel, a compat variant of P010
  *
  * Enum value describing the most common video formats.
  */
@@ -166,6 +168,7 @@ typedef enum {
   GST_VIDEO_FORMAT_P010_10LE,
   GST_VIDEO_FORMAT_IYU2,
   GST_VIDEO_FORMAT_VYUY,
+  GST_VIDEO_FORMAT_P010_10LEC,
 } GstVideoFormat;
 
 #define GST_VIDEO_MAX_PLANES 4
@@ -504,7 +507,8 @@ gconstpointer  gst_video_format_get_palette          (GstVideoFormat format, gsi
     "GRAY16_LE, v308, IYU2, RGB16, BGR16, RGB15, BGR15, UYVP, A420, RGB8P, YUV9, YVU9, " \
     "IYU1, ARGB64, AYUV64, r210, I420_10LE, I420_10BE, I422_10LE, I422_10BE, " \
     "Y444_10LE, Y444_10BE, GBR, GBR_10LE, GBR_10BE, NV12_64Z32, A420_10LE, "\
-    "A420_10BE, A422_10LE, A422_10BE, A444_10LE, A444_10BE, P010_10LE, P010_10BE }"
+    "A420_10BE, A422_10LE, A422_10BE, A444_10LE, A444_10BE, P010_10LE, "\
+    "P010_10BE, P010_10LEC }"
 
 /**
  * GST_VIDEO_CAPS_MAKE:
-- 
2.7.4

