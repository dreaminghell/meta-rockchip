From 90a3247de77843031a81161aa674041db45c1222 Mon Sep 17 00:00:00 2001
From: Daniel Stone <daniels@collabora.com>
Date: Tue, 6 Dec 2016 19:23:11 +0000
Subject: [PATCH 38/94] compositor-drm: Store format in drm_fb

This uses the new pixel-format helpers, so we can also replace depth/bpp
with these.

Differential Revision: https://phabricator.freedesktop.org/D1513

Signed-off-by: Daniel Stone <daniels@collabora.com>
Reviewed-by: Pekka Paalanen <pekka.paalaneN@collabora.co.uk>
---
 src/compositor-drm.c | 44 ++++++++++++++++++++++++++++----------------
 1 file changed, 28 insertions(+), 16 deletions(-)

diff --git a/src/compositor-drm.c b/src/compositor-drm.c
index 0b53d63..cc5f2fe 100644
--- a/src/compositor-drm.c
+++ b/src/compositor-drm.c
@@ -52,6 +52,7 @@
 #include "shared/timespec-util.h"
 #include "gl-renderer.h"
 #include "pixman-renderer.h"
+#include "pixel-formats.h"
 #include "libbacklight.h"
 #include "libinput-seat.h"
 #include "launcher-util.h"
@@ -145,6 +146,7 @@ struct drm_fb {
 	enum drm_fb_type type;
 
 	uint32_t fb_id, stride, handle, size;
+	const struct pixel_format_info *format;
 	int width, height;
 	int fd;
 	struct weston_buffer_reference buffer_ref;
@@ -296,7 +298,6 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
 {
 	struct drm_fb *fb;
 	int ret;
-	uint32_t bpp, depth;
 
 	struct drm_mode_create_dumb create_arg;
 	struct drm_mode_destroy_dumb destroy_arg;
@@ -306,20 +307,21 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
 	if (!fb)
 		return NULL;
 
-	switch (format) {
-		case GBM_FORMAT_XRGB8888:
-			bpp = 32;
-			depth = 24;
-			break;
-		case GBM_FORMAT_RGB565:
-			bpp = depth = 16;
-			break;
-		default:
-			return NULL;
+	fb->format = pixel_format_get_info(format);
+	if (!fb->format) {
+		weston_log("failed to look up format 0x%lx\n",
+			   (unsigned long) format);
+		goto err_fb;
+	}
+
+	if (!fb->format->depth || !fb->format->bpp) {
+		weston_log("format 0x%lx is not compatible with dumb buffers\n",
+			   (unsigned long) format);
+		goto err_fb;
 	}
 
 	memset(&create_arg, 0, sizeof create_arg);
-	create_arg.bpp = bpp;
+	create_arg.bpp = fb->format->bpp;
 	create_arg.width = width;
 	create_arg.height = height;
 
@@ -345,7 +347,8 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
 		offsets[0] = 0;
 
 		ret = drmModeAddFB2(b->drm.fd, width, height,
-				    format, handles, pitches, offsets,
+				    fb->format->format,
+				    handles, pitches, offsets,
 				    &fb->fb_id, 0);
 		if (ret) {
 			weston_log("addfb2 failed: %m\n");
@@ -354,7 +357,8 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
 	}
 
 	if (ret) {
-		ret = drmModeAddFB(b->drm.fd, width, height, depth, bpp,
+		ret = drmModeAddFB(b->drm.fd, width, height,
+				   fb->format->depth, fb->format->bpp,
 				   fb->stride, fb->handle, &fb->fb_id);
 	}
 
@@ -433,9 +437,16 @@ drm_fb_get_from_bo(struct gbm_bo *bo, struct drm_backend *backend,
 	fb->height = gbm_bo_get_height(bo);
 	fb->stride = gbm_bo_get_stride(bo);
 	fb->handle = gbm_bo_get_handle(bo).u32;
+	fb->format = pixel_format_get_info(format);
 	fb->size = fb->stride * fb->height;
 	fb->fd = backend->drm.fd;
 
+	if (!fb->format) {
+		weston_log("couldn't look up format 0x%lx\n",
+			   (unsigned long) format);
+		goto err_free;
+	}
+
 	if (backend->min_width > fb->width ||
 	    fb->width > backend->max_width ||
 	    backend->min_height > fb->height ||
@@ -461,9 +472,10 @@ drm_fb_get_from_bo(struct gbm_bo *bo, struct drm_backend *backend,
 		}
 	}
 
-	if (ret)
+	if (ret && fb->format->depth && fb->format->bpp)
 		ret = drmModeAddFB(backend->drm.fd, fb->width, fb->height,
-				   24, 32, fb->stride, fb->handle, &fb->fb_id);
+				   fb->format->depth, fb->format->bpp,
+				   fb->stride, fb->handle, &fb->fb_id);
 
 	if (ret) {
 		weston_log("failed to create kms fb: %m\n");
-- 
1.9.1

